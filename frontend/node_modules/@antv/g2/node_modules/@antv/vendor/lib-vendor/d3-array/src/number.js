"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
function _export(target, all) {
    for(var name in all)Object.defineProperty(target, name, {
        enumerable: true,
        get: all[name]
    });
}
_export(exports, {
    default: function() {
        return number;
    },
    numbers: function() {
        return numbers;
    }
});
function _ts_generator(thisArg, body) {
    var f, y, t, g, _ = {
        label: 0,
        sent: function() {
            if (t[0] & 1) throw t[1];
            return t[1];
        },
        trys: [],
        ops: []
    };
    return g = {
        next: verb(0),
        "throw": verb(1),
        "return": verb(2)
    }, typeof Symbol === "function" && (g[Symbol.iterator] = function() {
        return this;
    }), g;
    function verb(n) {
        return function(v) {
            return step([
                n,
                v
            ]);
        };
    }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while(_)try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [
                op[0] & 2,
                t.value
            ];
            switch(op[0]){
                case 0:
                case 1:
                    t = op;
                    break;
                case 4:
                    _.label++;
                    return {
                        value: op[1],
                        done: false
                    };
                case 5:
                    _.label++;
                    y = op[1];
                    op = [
                        0
                    ];
                    continue;
                case 7:
                    op = _.ops.pop();
                    _.trys.pop();
                    continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) {
                        _ = 0;
                        continue;
                    }
                    if (op[0] === 3 && (!t || op[1] > t[0] && op[1] < t[3])) {
                        _.label = op[1];
                        break;
                    }
                    if (op[0] === 6 && _.label < t[1]) {
                        _.label = t[1];
                        t = op;
                        break;
                    }
                    if (t && _.label < t[2]) {
                        _.label = t[2];
                        _.ops.push(op);
                        break;
                    }
                    if (t[2]) _.ops.pop();
                    _.trys.pop();
                    continue;
            }
            op = body.call(thisArg, _);
        } catch (e) {
            op = [
                6,
                e
            ];
            y = 0;
        } finally{
            f = t = 0;
        }
        if (op[0] & 5) throw op[1];
        return {
            value: op[0] ? op[1] : void 0,
            done: true
        };
    }
}
function number(x) {
    return x === null ? NaN : +x;
}
function numbers(values, valueof) {
    var _iteratorNormalCompletion, _didIteratorError, _iteratorError, _iterator, _step, value, err, index, _iteratorNormalCompletion1, _didIteratorError1, _iteratorError1, _iterator1, _step1, value1, err;
    return _ts_generator(this, function(_state) {
        switch(_state.label){
            case 0:
                if (!(valueof === undefined)) return [
                    3,
                    9
                ];
                _iteratorNormalCompletion = true, _didIteratorError = false, _iteratorError = undefined;
                _state.label = 1;
            case 1:
                _state.trys.push([
                    1,
                    6,
                    7,
                    8
                ]);
                _iterator = values[Symbol.iterator]();
                _state.label = 2;
            case 2:
                if (!!(_iteratorNormalCompletion = (_step = _iterator.next()).done)) return [
                    3,
                    5
                ];
                value = _step.value;
                if (!(value != null && (value = +value) >= value)) return [
                    3,
                    4
                ];
                return [
                    4,
                    value
                ];
            case 3:
                _state.sent();
                _state.label = 4;
            case 4:
                _iteratorNormalCompletion = true;
                return [
                    3,
                    2
                ];
            case 5:
                return [
                    3,
                    8
                ];
            case 6:
                err = _state.sent();
                _didIteratorError = true;
                _iteratorError = err;
                return [
                    3,
                    8
                ];
            case 7:
                try {
                    if (!_iteratorNormalCompletion && _iterator.return != null) {
                        _iterator.return();
                    }
                } finally{
                    if (_didIteratorError) {
                        throw _iteratorError;
                    }
                }
                return [
                    7
                ];
            case 8:
                return [
                    3,
                    17
                ];
            case 9:
                index = -1;
                _iteratorNormalCompletion1 = true, _didIteratorError1 = false, _iteratorError1 = undefined;
                _state.label = 10;
            case 10:
                _state.trys.push([
                    10,
                    15,
                    16,
                    17
                ]);
                _iterator1 = values[Symbol.iterator]();
                _state.label = 11;
            case 11:
                if (!!(_iteratorNormalCompletion1 = (_step1 = _iterator1.next()).done)) return [
                    3,
                    14
                ];
                value1 = _step1.value;
                if (!((value1 = valueof(value1, ++index, values)) != null && (value1 = +value1) >= value1)) return [
                    3,
                    13
                ];
                return [
                    4,
                    value1
                ];
            case 12:
                _state.sent();
                _state.label = 13;
            case 13:
                _iteratorNormalCompletion1 = true;
                return [
                    3,
                    11
                ];
            case 14:
                return [
                    3,
                    17
                ];
            case 15:
                err = _state.sent();
                _didIteratorError1 = true;
                _iteratorError1 = err;
                return [
                    3,
                    17
                ];
            case 16:
                try {
                    if (!_iteratorNormalCompletion1 && _iterator1.return != null) {
                        _iterator1.return();
                    }
                } finally{
                    if (_didIteratorError1) {
                        throw _iteratorError1;
                    }
                }
                return [
                    7
                ];
            case 17:
                return [
                    2
                ];
        }
    });
}
